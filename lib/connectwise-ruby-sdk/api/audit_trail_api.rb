=begin
#Connectwise REST API

#ConnectWise API

OpenAPI spec version: 1.0.0
Contact: platform@connectwise.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module Connectwise
  class AuditTrailApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Get Members Count
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type 
    # @option opts [Integer] :id 
    # @option opts [String] :device_identifier 
    # @return [Count]
    def system_audittrail_count_get(opts = {})
      data, _status_code, _headers = system_audittrail_count_get_with_http_info(opts)
      return data
    end

    # 
    # Get Members Count
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type 
    # @option opts [Integer] :id 
    # @option opts [String] :device_identifier 
    # @return [Array<(Count, Fixnum, Hash)>] Count data, response status code and response headers
    def system_audittrail_count_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AuditTrailApi.system_audittrail_count_get ..."
      end
      if opts[:'type'] && !['Ticket', 'Configuration', 'Project', 'Invoice'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of Ticket, Configuration, Project, Invoice'
      end
      # resource path
      local_var_path = "/system/audittrail/count".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'deviceIdentifier'] = opts[:'device_identifier'] if !opts[:'device_identifier'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Count')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuditTrailApi#system_audittrail_count_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get Audit Trail
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type 
    # @option opts [Integer] :id 
    # @option opts [String] :device_identifier 
    # @option opts [Integer] :page 
    # @option opts [Integer] :page_size 
    # @return [Array<AuditTrailEntry>]
    def system_audittrail_get(opts = {})
      data, _status_code, _headers = system_audittrail_get_with_http_info(opts)
      return data
    end

    # 
    # Get Audit Trail
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type 
    # @option opts [Integer] :id 
    # @option opts [String] :device_identifier 
    # @option opts [Integer] :page 
    # @option opts [Integer] :page_size 
    # @return [Array<(Array<AuditTrailEntry>, Fixnum, Hash)>] Array<AuditTrailEntry> data, response status code and response headers
    def system_audittrail_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AuditTrailApi.system_audittrail_get ..."
      end
      if opts[:'type'] && !['Ticket', 'Configuration', 'Project', 'Invoice'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of Ticket, Configuration, Project, Invoice'
      end
      # resource path
      local_var_path = "/system/audittrail".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'deviceIdentifier'] = opts[:'device_identifier'] if !opts[:'device_identifier'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AuditTrailEntry>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuditTrailApi#system_audittrail_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Insert Audit Trail Entries
    # @param insert_request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def system_audittrail_post(insert_request, opts = {})
      system_audittrail_post_with_http_info(insert_request, opts)
      return nil
    end

    # 
    # Insert Audit Trail Entries
    # @param insert_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def system_audittrail_post_with_http_info(insert_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AuditTrailApi.system_audittrail_post ..."
      end
      # verify the required parameter 'insert_request' is set
      fail ArgumentError, "Missing the required parameter 'insert_request' when calling AuditTrailApi.system_audittrail_post" if insert_request.nil?
      # resource path
      local_var_path = "/system/audittrail".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(insert_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuditTrailApi#system_audittrail_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
