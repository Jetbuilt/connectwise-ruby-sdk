=begin
#Connectwise REST API

#ConnectWise API

OpenAPI spec version: 1.0.0
Contact: platform@connectwise.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module Connectwise
  class ProjectsTeamMembersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Get Team Members Count
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions 
    # @return [Count]
    def project_projects_id_team_members_count_get(id, opts = {})
      data, _status_code, _headers = project_projects_id_team_members_count_get_with_http_info(id, opts)
      return data
    end

    # 
    # Get Team Members Count
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions 
    # @return [Array<(Count, Fixnum, Hash)>] Count data, response status code and response headers
    def project_projects_id_team_members_count_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsTeamMembersApi.project_projects_id_team_members_count_get ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ProjectsTeamMembersApi.project_projects_id_team_members_count_get" if id.nil?
      # resource path
      local_var_path = "/project/projects/{id}/teamMembers/count".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'conditions'] = opts[:'conditions'] if !opts[:'conditions'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Count')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsTeamMembersApi#project_projects_id_team_members_count_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get Team Members
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions 
    # @option opts [String] :order_by 
    # @option opts [Integer] :page 
    # @option opts [Integer] :page_size 
    # @return [Array<ProjectTeamMember>]
    def project_projects_id_team_members_get(id, opts = {})
      data, _status_code, _headers = project_projects_id_team_members_get_with_http_info(id, opts)
      return data
    end

    # 
    # Get Team Members
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions 
    # @option opts [String] :order_by 
    # @option opts [Integer] :page 
    # @option opts [Integer] :page_size 
    # @return [Array<(Array<ProjectTeamMember>, Fixnum, Hash)>] Array<ProjectTeamMember> data, response status code and response headers
    def project_projects_id_team_members_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsTeamMembersApi.project_projects_id_team_members_get ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ProjectsTeamMembersApi.project_projects_id_team_members_get" if id.nil?
      # resource path
      local_var_path = "/project/projects/{id}/teamMembers".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'conditions'] = opts[:'conditions'] if !opts[:'conditions'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ProjectTeamMember>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsTeamMembersApi#project_projects_id_team_members_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create Team Member
    # @param id 
    # @param team_member 
    # @param [Hash] opts the optional parameters
    # @return [ProjectTeamMember]
    def project_projects_id_team_members_post(id, team_member, opts = {})
      data, _status_code, _headers = project_projects_id_team_members_post_with_http_info(id, team_member, opts)
      return data
    end

    # 
    # Create Team Member
    # @param id 
    # @param team_member 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectTeamMember, Fixnum, Hash)>] ProjectTeamMember data, response status code and response headers
    def project_projects_id_team_members_post_with_http_info(id, team_member, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsTeamMembersApi.project_projects_id_team_members_post ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ProjectsTeamMembersApi.project_projects_id_team_members_post" if id.nil?
      # verify the required parameter 'team_member' is set
      fail ArgumentError, "Missing the required parameter 'team_member' when calling ProjectsTeamMembersApi.project_projects_id_team_members_post" if team_member.nil?
      # resource path
      local_var_path = "/project/projects/{id}/teamMembers".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(team_member)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectTeamMember')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsTeamMembersApi#project_projects_id_team_members_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete Team Member By Id
    # @param id 
    # @param team_member_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def project_projects_id_team_members_team_member_id_delete(id, team_member_id, opts = {})
      project_projects_id_team_members_team_member_id_delete_with_http_info(id, team_member_id, opts)
      return nil
    end

    # 
    # Delete Team Member By Id
    # @param id 
    # @param team_member_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def project_projects_id_team_members_team_member_id_delete_with_http_info(id, team_member_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsTeamMembersApi.project_projects_id_team_members_team_member_id_delete ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ProjectsTeamMembersApi.project_projects_id_team_members_team_member_id_delete" if id.nil?
      # verify the required parameter 'team_member_id' is set
      fail ArgumentError, "Missing the required parameter 'team_member_id' when calling ProjectsTeamMembersApi.project_projects_id_team_members_team_member_id_delete" if team_member_id.nil?
      # resource path
      local_var_path = "/project/projects/{id}/teamMembers/{teamMemberId}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'teamMemberId' + '}', team_member_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsTeamMembersApi#project_projects_id_team_members_team_member_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get Team Member By Id
    # @param id 
    # @param team_member_id 
    # @param [Hash] opts the optional parameters
    # @return [ProjectTeamMember]
    def project_projects_id_team_members_team_member_id_get(id, team_member_id, opts = {})
      data, _status_code, _headers = project_projects_id_team_members_team_member_id_get_with_http_info(id, team_member_id, opts)
      return data
    end

    # 
    # Get Team Member By Id
    # @param id 
    # @param team_member_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectTeamMember, Fixnum, Hash)>] ProjectTeamMember data, response status code and response headers
    def project_projects_id_team_members_team_member_id_get_with_http_info(id, team_member_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsTeamMembersApi.project_projects_id_team_members_team_member_id_get ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ProjectsTeamMembersApi.project_projects_id_team_members_team_member_id_get" if id.nil?
      # verify the required parameter 'team_member_id' is set
      fail ArgumentError, "Missing the required parameter 'team_member_id' when calling ProjectsTeamMembersApi.project_projects_id_team_members_team_member_id_get" if team_member_id.nil?
      # resource path
      local_var_path = "/project/projects/{id}/teamMembers/{teamMemberId}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'teamMemberId' + '}', team_member_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectTeamMember')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsTeamMembersApi#project_projects_id_team_members_team_member_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update Team Member
    # @param id 
    # @param team_member_id 
    # @param operations 
    # @param [Hash] opts the optional parameters
    # @return [ProjectTeamMember]
    def project_projects_id_team_members_team_member_id_patch(id, team_member_id, operations, opts = {})
      data, _status_code, _headers = project_projects_id_team_members_team_member_id_patch_with_http_info(id, team_member_id, operations, opts)
      return data
    end

    # 
    # Update Team Member
    # @param id 
    # @param team_member_id 
    # @param operations 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectTeamMember, Fixnum, Hash)>] ProjectTeamMember data, response status code and response headers
    def project_projects_id_team_members_team_member_id_patch_with_http_info(id, team_member_id, operations, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsTeamMembersApi.project_projects_id_team_members_team_member_id_patch ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ProjectsTeamMembersApi.project_projects_id_team_members_team_member_id_patch" if id.nil?
      # verify the required parameter 'team_member_id' is set
      fail ArgumentError, "Missing the required parameter 'team_member_id' when calling ProjectsTeamMembersApi.project_projects_id_team_members_team_member_id_patch" if team_member_id.nil?
      # verify the required parameter 'operations' is set
      fail ArgumentError, "Missing the required parameter 'operations' when calling ProjectsTeamMembersApi.project_projects_id_team_members_team_member_id_patch" if operations.nil?
      # resource path
      local_var_path = "/project/projects/{id}/teamMembers/{teamMemberId}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'teamMemberId' + '}', team_member_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(operations)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectTeamMember')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsTeamMembersApi#project_projects_id_team_members_team_member_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Replace Team Member
    # @param id 
    # @param team_member_id 
    # @param team_member 
    # @param [Hash] opts the optional parameters
    # @return [ProjectTeamMember]
    def project_projects_id_team_members_team_member_id_put(id, team_member_id, team_member, opts = {})
      data, _status_code, _headers = project_projects_id_team_members_team_member_id_put_with_http_info(id, team_member_id, team_member, opts)
      return data
    end

    # 
    # Replace Team Member
    # @param id 
    # @param team_member_id 
    # @param team_member 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectTeamMember, Fixnum, Hash)>] ProjectTeamMember data, response status code and response headers
    def project_projects_id_team_members_team_member_id_put_with_http_info(id, team_member_id, team_member, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsTeamMembersApi.project_projects_id_team_members_team_member_id_put ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ProjectsTeamMembersApi.project_projects_id_team_members_team_member_id_put" if id.nil?
      # verify the required parameter 'team_member_id' is set
      fail ArgumentError, "Missing the required parameter 'team_member_id' when calling ProjectsTeamMembersApi.project_projects_id_team_members_team_member_id_put" if team_member_id.nil?
      # verify the required parameter 'team_member' is set
      fail ArgumentError, "Missing the required parameter 'team_member' when calling ProjectsTeamMembersApi.project_projects_id_team_members_team_member_id_put" if team_member.nil?
      # resource path
      local_var_path = "/project/projects/{id}/teamMembers/{teamMemberId}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'teamMemberId' + '}', team_member_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(team_member)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectTeamMember')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsTeamMembersApi#project_projects_id_team_members_team_member_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
