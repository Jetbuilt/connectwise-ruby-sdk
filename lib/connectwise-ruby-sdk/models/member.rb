=begin
#Connectwise REST API

#ConnectWise API

OpenAPI spec version: 1.0.0
Contact: platform@connectwise.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'date'

module Connectwise

  class Member
    attr_accessor :admin_flag

    attr_accessor :allow_expenses_entered_against_companies_flag

    attr_accessor :allow_in_cell_entry_on_time_sheet

    attr_accessor :billable_forecast

    attr_accessor :calendar

    attr_accessor :calendar_sync_integration_flag

    attr_accessor :country

    attr_accessor :daily_capacity

    attr_accessor :days_tolerance

    attr_accessor :default_department_id

    attr_accessor :default_email

    attr_accessor :default_location_id

    attr_accessor :default_phone

    attr_accessor :disable_online_flag

    attr_accessor :enable_ldap_authentication_flag

    attr_accessor :enable_mobile_flag

    attr_accessor :enable_mobile_gps_flag

    attr_accessor :enter_time_against_company_flag

    attr_accessor :expense_approver

    attr_accessor :first_name

    attr_accessor :hide_member_in_dispatch_portal_flag

    attr_accessor :hire_date

    attr_accessor :home_email

    attr_accessor :home_extension

    attr_accessor :home_phone

    attr_accessor :hourly_cost

    attr_accessor :hourly_rate

    attr_accessor :id

    attr_accessor :identifier

    attr_accessor :inactive_date

    attr_accessor :inactive_flag

    attr_accessor :include_in_utilization_reporting_flag

    attr_accessor :last_login

    attr_accessor :last_name

    attr_accessor :license_class

    attr_accessor :mapi_name

    attr_accessor :middle_initial

    attr_accessor :minimum_hours

    attr_accessor :mobile_email

    attr_accessor :mobile_extension

    attr_accessor :mobile_phone

    attr_accessor :notes

    attr_accessor :office_email

    attr_accessor :office_extension

    attr_accessor :office_phone

    attr_accessor :project_default_board

    attr_accessor :project_default_department_id

    attr_accessor :project_default_location_id

    attr_accessor :reports_to

    attr_accessor :require_expense_entry_flag

    attr_accessor :require_start_and_end_time_on_time_entry_flag

    attr_accessor :require_time_sheet_entry_flag

    attr_accessor :restrict_default_sales_territory_flag

    attr_accessor :restrict_default_warehouse_bin_flag

    attr_accessor :restrict_default_warehouse_flag

    attr_accessor :restrict_department_flag

    attr_accessor :restrict_location_flag

    attr_accessor :restrict_project_default_department_flag

    attr_accessor :restrict_project_default_location_flag

    attr_accessor :restrict_schedule_flag

    attr_accessor :restrict_service_default_department_flag

    attr_accessor :restrict_service_default_location_flag

    attr_accessor :sales_default_location_id

    attr_accessor :schedule_capacity

    attr_accessor :schedule_default_department_id

    attr_accessor :schedule_default_location_id

    attr_accessor :security_level

    attr_accessor :security_location_id

    attr_accessor :security_role

    attr_accessor :service_default_board

    attr_accessor :service_default_department_id

    attr_accessor :service_default_location_id

    attr_accessor :service_location

    attr_accessor :service_teams

    attr_accessor :time_approver

    attr_accessor :time_reminder_email_flag

    attr_accessor :time_sheet_start_date

    attr_accessor :time_zone

    attr_accessor :title

    attr_accessor :type

    attr_accessor :vendor_number

    attr_accessor :warehouse

    attr_accessor :warehouse_bin

    attr_accessor :work_role

    attr_accessor :work_type

    # Metadata of the entity
    attr_accessor :_info

    attr_accessor :system_flag

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'admin_flag' => :'adminFlag',
        :'allow_expenses_entered_against_companies_flag' => :'allowExpensesEnteredAgainstCompaniesFlag',
        :'allow_in_cell_entry_on_time_sheet' => :'allowInCellEntryOnTimeSheet',
        :'billable_forecast' => :'billableForecast',
        :'calendar' => :'calendar',
        :'calendar_sync_integration_flag' => :'calendarSyncIntegrationFlag',
        :'country' => :'country',
        :'daily_capacity' => :'dailyCapacity',
        :'days_tolerance' => :'daysTolerance',
        :'default_department_id' => :'defaultDepartmentId',
        :'default_email' => :'defaultEmail',
        :'default_location_id' => :'defaultLocationId',
        :'default_phone' => :'defaultPhone',
        :'disable_online_flag' => :'disableOnlineFlag',
        :'enable_ldap_authentication_flag' => :'enableLdapAuthenticationFlag',
        :'enable_mobile_flag' => :'enableMobileFlag',
        :'enable_mobile_gps_flag' => :'enableMobileGpsFlag',
        :'enter_time_against_company_flag' => :'enterTimeAgainstCompanyFlag',
        :'expense_approver' => :'expenseApprover',
        :'first_name' => :'firstName',
        :'hide_member_in_dispatch_portal_flag' => :'hideMemberInDispatchPortalFlag',
        :'hire_date' => :'hireDate',
        :'home_email' => :'homeEmail',
        :'home_extension' => :'homeExtension',
        :'home_phone' => :'homePhone',
        :'hourly_cost' => :'hourlyCost',
        :'hourly_rate' => :'hourlyRate',
        :'id' => :'id',
        :'identifier' => :'identifier',
        :'inactive_date' => :'inactiveDate',
        :'inactive_flag' => :'inactiveFlag',
        :'include_in_utilization_reporting_flag' => :'includeInUtilizationReportingFlag',
        :'last_login' => :'lastLogin',
        :'last_name' => :'lastName',
        :'license_class' => :'licenseClass',
        :'mapi_name' => :'mapiName',
        :'middle_initial' => :'middleInitial',
        :'minimum_hours' => :'minimumHours',
        :'mobile_email' => :'mobileEmail',
        :'mobile_extension' => :'mobileExtension',
        :'mobile_phone' => :'mobilePhone',
        :'notes' => :'notes',
        :'office_email' => :'officeEmail',
        :'office_extension' => :'officeExtension',
        :'office_phone' => :'officePhone',
        :'project_default_board' => :'projectDefaultBoard',
        :'project_default_department_id' => :'projectDefaultDepartmentId',
        :'project_default_location_id' => :'projectDefaultLocationId',
        :'reports_to' => :'reportsTo',
        :'require_expense_entry_flag' => :'requireExpenseEntryFlag',
        :'require_start_and_end_time_on_time_entry_flag' => :'requireStartAndEndTimeOnTimeEntryFlag',
        :'require_time_sheet_entry_flag' => :'requireTimeSheetEntryFlag',
        :'restrict_default_sales_territory_flag' => :'restrictDefaultSalesTerritoryFlag',
        :'restrict_default_warehouse_bin_flag' => :'restrictDefaultWarehouseBinFlag',
        :'restrict_default_warehouse_flag' => :'restrictDefaultWarehouseFlag',
        :'restrict_department_flag' => :'restrictDepartmentFlag',
        :'restrict_location_flag' => :'restrictLocationFlag',
        :'restrict_project_default_department_flag' => :'restrictProjectDefaultDepartmentFlag',
        :'restrict_project_default_location_flag' => :'restrictProjectDefaultLocationFlag',
        :'restrict_schedule_flag' => :'restrictScheduleFlag',
        :'restrict_service_default_department_flag' => :'restrictServiceDefaultDepartmentFlag',
        :'restrict_service_default_location_flag' => :'restrictServiceDefaultLocationFlag',
        :'sales_default_location_id' => :'salesDefaultLocationId',
        :'schedule_capacity' => :'scheduleCapacity',
        :'schedule_default_department_id' => :'scheduleDefaultDepartmentId',
        :'schedule_default_location_id' => :'scheduleDefaultLocationId',
        :'security_level' => :'securityLevel',
        :'security_location_id' => :'securityLocationId',
        :'security_role' => :'securityRole',
        :'service_default_board' => :'serviceDefaultBoard',
        :'service_default_department_id' => :'serviceDefaultDepartmentId',
        :'service_default_location_id' => :'serviceDefaultLocationId',
        :'service_location' => :'serviceLocation',
        :'service_teams' => :'serviceTeams',
        :'time_approver' => :'timeApprover',
        :'time_reminder_email_flag' => :'timeReminderEmailFlag',
        :'time_sheet_start_date' => :'timeSheetStartDate',
        :'time_zone' => :'timeZone',
        :'title' => :'title',
        :'type' => :'type',
        :'vendor_number' => :'vendorNumber',
        :'warehouse' => :'warehouse',
        :'warehouse_bin' => :'warehouseBin',
        :'work_role' => :'workRole',
        :'work_type' => :'workType',
        :'_info' => :'_info',
        :'system_flag' => :'System_Flag'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'admin_flag' => :'BOOLEAN',
        :'allow_expenses_entered_against_companies_flag' => :'BOOLEAN',
        :'allow_in_cell_entry_on_time_sheet' => :'BOOLEAN',
        :'billable_forecast' => :'Float',
        :'calendar' => :'CalendarReference',
        :'calendar_sync_integration_flag' => :'BOOLEAN',
        :'country' => :'CountryReference',
        :'daily_capacity' => :'Float',
        :'days_tolerance' => :'Integer',
        :'default_department_id' => :'Integer',
        :'default_email' => :'String',
        :'default_location_id' => :'Integer',
        :'default_phone' => :'String',
        :'disable_online_flag' => :'BOOLEAN',
        :'enable_ldap_authentication_flag' => :'BOOLEAN',
        :'enable_mobile_flag' => :'BOOLEAN',
        :'enable_mobile_gps_flag' => :'BOOLEAN',
        :'enter_time_against_company_flag' => :'BOOLEAN',
        :'expense_approver' => :'MemberReference',
        :'first_name' => :'String',
        :'hide_member_in_dispatch_portal_flag' => :'BOOLEAN',
        :'hire_date' => :'DateTime',
        :'home_email' => :'String',
        :'home_extension' => :'String',
        :'home_phone' => :'String',
        :'hourly_cost' => :'Float',
        :'hourly_rate' => :'Float',
        :'id' => :'Integer',
        :'identifier' => :'String',
        :'inactive_date' => :'DateTime',
        :'inactive_flag' => :'BOOLEAN',
        :'include_in_utilization_reporting_flag' => :'BOOLEAN',
        :'last_login' => :'String',
        :'last_name' => :'String',
        :'license_class' => :'String',
        :'mapi_name' => :'String',
        :'middle_initial' => :'String',
        :'minimum_hours' => :'Float',
        :'mobile_email' => :'String',
        :'mobile_extension' => :'String',
        :'mobile_phone' => :'String',
        :'notes' => :'String',
        :'office_email' => :'String',
        :'office_extension' => :'String',
        :'office_phone' => :'String',
        :'project_default_board' => :'ProjectBoardReference',
        :'project_default_department_id' => :'Integer',
        :'project_default_location_id' => :'Integer',
        :'reports_to' => :'MemberReference',
        :'require_expense_entry_flag' => :'BOOLEAN',
        :'require_start_and_end_time_on_time_entry_flag' => :'BOOLEAN',
        :'require_time_sheet_entry_flag' => :'BOOLEAN',
        :'restrict_default_sales_territory_flag' => :'BOOLEAN',
        :'restrict_default_warehouse_bin_flag' => :'BOOLEAN',
        :'restrict_default_warehouse_flag' => :'BOOLEAN',
        :'restrict_department_flag' => :'BOOLEAN',
        :'restrict_location_flag' => :'BOOLEAN',
        :'restrict_project_default_department_flag' => :'BOOLEAN',
        :'restrict_project_default_location_flag' => :'BOOLEAN',
        :'restrict_schedule_flag' => :'BOOLEAN',
        :'restrict_service_default_department_flag' => :'BOOLEAN',
        :'restrict_service_default_location_flag' => :'BOOLEAN',
        :'sales_default_location_id' => :'Integer',
        :'schedule_capacity' => :'Float',
        :'schedule_default_department_id' => :'Integer',
        :'schedule_default_location_id' => :'Integer',
        :'security_level' => :'String',
        :'security_location_id' => :'Integer',
        :'security_role' => :'SecurityRoleReference',
        :'service_default_board' => :'BoardReference',
        :'service_default_department_id' => :'Integer',
        :'service_default_location_id' => :'Integer',
        :'service_location' => :'ServiceLocationReference',
        :'service_teams' => :'Array<Integer>',
        :'time_approver' => :'MemberReference',
        :'time_reminder_email_flag' => :'BOOLEAN',
        :'time_sheet_start_date' => :'DateTime',
        :'time_zone' => :'TimeZoneReference',
        :'title' => :'String',
        :'type' => :'MemberTypeReference',
        :'vendor_number' => :'String',
        :'warehouse' => :'WarehouseReference',
        :'warehouse_bin' => :'WarehouseBinReference',
        :'work_role' => :'WorkRoleReference',
        :'work_type' => :'WorkTypeReference',
        :'_info' => :'Metadata',
        :'system_flag' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'adminFlag')
        self.admin_flag = attributes[:'adminFlag']
      end

      if attributes.has_key?(:'allowExpensesEnteredAgainstCompaniesFlag')
        self.allow_expenses_entered_against_companies_flag = attributes[:'allowExpensesEnteredAgainstCompaniesFlag']
      end

      if attributes.has_key?(:'allowInCellEntryOnTimeSheet')
        self.allow_in_cell_entry_on_time_sheet = attributes[:'allowInCellEntryOnTimeSheet']
      end

      if attributes.has_key?(:'billableForecast')
        self.billable_forecast = attributes[:'billableForecast']
      end

      if attributes.has_key?(:'calendar')
        self.calendar = attributes[:'calendar']
      end

      if attributes.has_key?(:'calendarSyncIntegrationFlag')
        self.calendar_sync_integration_flag = attributes[:'calendarSyncIntegrationFlag']
      end

      if attributes.has_key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.has_key?(:'dailyCapacity')
        self.daily_capacity = attributes[:'dailyCapacity']
      end

      if attributes.has_key?(:'daysTolerance')
        self.days_tolerance = attributes[:'daysTolerance']
      end

      if attributes.has_key?(:'defaultDepartmentId')
        self.default_department_id = attributes[:'defaultDepartmentId']
      end

      if attributes.has_key?(:'defaultEmail')
        self.default_email = attributes[:'defaultEmail']
      end

      if attributes.has_key?(:'defaultLocationId')
        self.default_location_id = attributes[:'defaultLocationId']
      end

      if attributes.has_key?(:'defaultPhone')
        self.default_phone = attributes[:'defaultPhone']
      end

      if attributes.has_key?(:'disableOnlineFlag')
        self.disable_online_flag = attributes[:'disableOnlineFlag']
      end

      if attributes.has_key?(:'enableLdapAuthenticationFlag')
        self.enable_ldap_authentication_flag = attributes[:'enableLdapAuthenticationFlag']
      end

      if attributes.has_key?(:'enableMobileFlag')
        self.enable_mobile_flag = attributes[:'enableMobileFlag']
      end

      if attributes.has_key?(:'enableMobileGpsFlag')
        self.enable_mobile_gps_flag = attributes[:'enableMobileGpsFlag']
      end

      if attributes.has_key?(:'enterTimeAgainstCompanyFlag')
        self.enter_time_against_company_flag = attributes[:'enterTimeAgainstCompanyFlag']
      end

      if attributes.has_key?(:'expenseApprover')
        self.expense_approver = attributes[:'expenseApprover']
      end

      if attributes.has_key?(:'firstName')
        self.first_name = attributes[:'firstName']
      end

      if attributes.has_key?(:'hideMemberInDispatchPortalFlag')
        self.hide_member_in_dispatch_portal_flag = attributes[:'hideMemberInDispatchPortalFlag']
      end

      if attributes.has_key?(:'hireDate')
        self.hire_date = attributes[:'hireDate']
      end

      if attributes.has_key?(:'homeEmail')
        self.home_email = attributes[:'homeEmail']
      end

      if attributes.has_key?(:'homeExtension')
        self.home_extension = attributes[:'homeExtension']
      end

      if attributes.has_key?(:'homePhone')
        self.home_phone = attributes[:'homePhone']
      end

      if attributes.has_key?(:'hourlyCost')
        self.hourly_cost = attributes[:'hourlyCost']
      end

      if attributes.has_key?(:'hourlyRate')
        self.hourly_rate = attributes[:'hourlyRate']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'identifier')
        self.identifier = attributes[:'identifier']
      end

      if attributes.has_key?(:'inactiveDate')
        self.inactive_date = attributes[:'inactiveDate']
      end

      if attributes.has_key?(:'inactiveFlag')
        self.inactive_flag = attributes[:'inactiveFlag']
      end

      if attributes.has_key?(:'includeInUtilizationReportingFlag')
        self.include_in_utilization_reporting_flag = attributes[:'includeInUtilizationReportingFlag']
      end

      if attributes.has_key?(:'lastLogin')
        self.last_login = attributes[:'lastLogin']
      end

      if attributes.has_key?(:'lastName')
        self.last_name = attributes[:'lastName']
      end

      if attributes.has_key?(:'licenseClass')
        self.license_class = attributes[:'licenseClass']
      end

      if attributes.has_key?(:'mapiName')
        self.mapi_name = attributes[:'mapiName']
      end

      if attributes.has_key?(:'middleInitial')
        self.middle_initial = attributes[:'middleInitial']
      end

      if attributes.has_key?(:'minimumHours')
        self.minimum_hours = attributes[:'minimumHours']
      end

      if attributes.has_key?(:'mobileEmail')
        self.mobile_email = attributes[:'mobileEmail']
      end

      if attributes.has_key?(:'mobileExtension')
        self.mobile_extension = attributes[:'mobileExtension']
      end

      if attributes.has_key?(:'mobilePhone')
        self.mobile_phone = attributes[:'mobilePhone']
      end

      if attributes.has_key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.has_key?(:'officeEmail')
        self.office_email = attributes[:'officeEmail']
      end

      if attributes.has_key?(:'officeExtension')
        self.office_extension = attributes[:'officeExtension']
      end

      if attributes.has_key?(:'officePhone')
        self.office_phone = attributes[:'officePhone']
      end

      if attributes.has_key?(:'projectDefaultBoard')
        self.project_default_board = attributes[:'projectDefaultBoard']
      end

      if attributes.has_key?(:'projectDefaultDepartmentId')
        self.project_default_department_id = attributes[:'projectDefaultDepartmentId']
      end

      if attributes.has_key?(:'projectDefaultLocationId')
        self.project_default_location_id = attributes[:'projectDefaultLocationId']
      end

      if attributes.has_key?(:'reportsTo')
        self.reports_to = attributes[:'reportsTo']
      end

      if attributes.has_key?(:'requireExpenseEntryFlag')
        self.require_expense_entry_flag = attributes[:'requireExpenseEntryFlag']
      end

      if attributes.has_key?(:'requireStartAndEndTimeOnTimeEntryFlag')
        self.require_start_and_end_time_on_time_entry_flag = attributes[:'requireStartAndEndTimeOnTimeEntryFlag']
      end

      if attributes.has_key?(:'requireTimeSheetEntryFlag')
        self.require_time_sheet_entry_flag = attributes[:'requireTimeSheetEntryFlag']
      end

      if attributes.has_key?(:'restrictDefaultSalesTerritoryFlag')
        self.restrict_default_sales_territory_flag = attributes[:'restrictDefaultSalesTerritoryFlag']
      end

      if attributes.has_key?(:'restrictDefaultWarehouseBinFlag')
        self.restrict_default_warehouse_bin_flag = attributes[:'restrictDefaultWarehouseBinFlag']
      end

      if attributes.has_key?(:'restrictDefaultWarehouseFlag')
        self.restrict_default_warehouse_flag = attributes[:'restrictDefaultWarehouseFlag']
      end

      if attributes.has_key?(:'restrictDepartmentFlag')
        self.restrict_department_flag = attributes[:'restrictDepartmentFlag']
      end

      if attributes.has_key?(:'restrictLocationFlag')
        self.restrict_location_flag = attributes[:'restrictLocationFlag']
      end

      if attributes.has_key?(:'restrictProjectDefaultDepartmentFlag')
        self.restrict_project_default_department_flag = attributes[:'restrictProjectDefaultDepartmentFlag']
      end

      if attributes.has_key?(:'restrictProjectDefaultLocationFlag')
        self.restrict_project_default_location_flag = attributes[:'restrictProjectDefaultLocationFlag']
      end

      if attributes.has_key?(:'restrictScheduleFlag')
        self.restrict_schedule_flag = attributes[:'restrictScheduleFlag']
      end

      if attributes.has_key?(:'restrictServiceDefaultDepartmentFlag')
        self.restrict_service_default_department_flag = attributes[:'restrictServiceDefaultDepartmentFlag']
      end

      if attributes.has_key?(:'restrictServiceDefaultLocationFlag')
        self.restrict_service_default_location_flag = attributes[:'restrictServiceDefaultLocationFlag']
      end

      if attributes.has_key?(:'salesDefaultLocationId')
        self.sales_default_location_id = attributes[:'salesDefaultLocationId']
      end

      if attributes.has_key?(:'scheduleCapacity')
        self.schedule_capacity = attributes[:'scheduleCapacity']
      end

      if attributes.has_key?(:'scheduleDefaultDepartmentId')
        self.schedule_default_department_id = attributes[:'scheduleDefaultDepartmentId']
      end

      if attributes.has_key?(:'scheduleDefaultLocationId')
        self.schedule_default_location_id = attributes[:'scheduleDefaultLocationId']
      end

      if attributes.has_key?(:'securityLevel')
        self.security_level = attributes[:'securityLevel']
      end

      if attributes.has_key?(:'securityLocationId')
        self.security_location_id = attributes[:'securityLocationId']
      end

      if attributes.has_key?(:'securityRole')
        self.security_role = attributes[:'securityRole']
      end

      if attributes.has_key?(:'serviceDefaultBoard')
        self.service_default_board = attributes[:'serviceDefaultBoard']
      end

      if attributes.has_key?(:'serviceDefaultDepartmentId')
        self.service_default_department_id = attributes[:'serviceDefaultDepartmentId']
      end

      if attributes.has_key?(:'serviceDefaultLocationId')
        self.service_default_location_id = attributes[:'serviceDefaultLocationId']
      end

      if attributes.has_key?(:'serviceLocation')
        self.service_location = attributes[:'serviceLocation']
      end

      if attributes.has_key?(:'serviceTeams')
        if (value = attributes[:'serviceTeams']).is_a?(Array)
          self.service_teams = value
        end
      end

      if attributes.has_key?(:'timeApprover')
        self.time_approver = attributes[:'timeApprover']
      end

      if attributes.has_key?(:'timeReminderEmailFlag')
        self.time_reminder_email_flag = attributes[:'timeReminderEmailFlag']
      end

      if attributes.has_key?(:'timeSheetStartDate')
        self.time_sheet_start_date = attributes[:'timeSheetStartDate']
      end

      if attributes.has_key?(:'timeZone')
        self.time_zone = attributes[:'timeZone']
      end

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'vendorNumber')
        self.vendor_number = attributes[:'vendorNumber']
      end

      if attributes.has_key?(:'warehouse')
        self.warehouse = attributes[:'warehouse']
      end

      if attributes.has_key?(:'warehouseBin')
        self.warehouse_bin = attributes[:'warehouseBin']
      end

      if attributes.has_key?(:'workRole')
        self.work_role = attributes[:'workRole']
      end

      if attributes.has_key?(:'workType')
        self.work_type = attributes[:'workType']
      end

      if attributes.has_key?(:'_info')
        self._info = attributes[:'_info']
      end

      if attributes.has_key?(:'System_Flag')
        self.system_flag = attributes[:'System_Flag']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new

      if !@default_email.nil? && @default_email.to_s.length > 250
        invalid_properties.push("invalid value for 'default_email', the character length must be smaller than or equal to 250.")
      end


      if !@default_phone.nil? && @default_phone.to_s.length > 15
        invalid_properties.push("invalid value for 'default_phone', the character length must be smaller than or equal to 15.")
      end

      if @first_name.nil?
        invalid_properties.push("invalid value for 'first_name', first_name cannot be nil.")
      end

      if @first_name.to_s.length > 30
        invalid_properties.push("invalid value for 'first_name', the character length must be smaller than or equal to 30.")
      end


      if !@home_email.nil? && @home_email.to_s.length > 250
        invalid_properties.push("invalid value for 'home_email', the character length must be smaller than or equal to 250.")
      end


      if !@home_extension.nil? && @home_extension.to_s.length > 10
        invalid_properties.push("invalid value for 'home_extension', the character length must be smaller than or equal to 10.")
      end


      if !@home_phone.nil? && @home_phone.to_s.length > 15
        invalid_properties.push("invalid value for 'home_phone', the character length must be smaller than or equal to 15.")
      end

      if @identifier.nil?
        invalid_properties.push("invalid value for 'identifier', identifier cannot be nil.")
      end

      if @identifier.to_s.length > 15
        invalid_properties.push("invalid value for 'identifier', the character length must be smaller than or equal to 15.")
      end

      if @last_name.nil?
        invalid_properties.push("invalid value for 'last_name', last_name cannot be nil.")
      end

      if @last_name.to_s.length > 30
        invalid_properties.push("invalid value for 'last_name', the character length must be smaller than or equal to 30.")
      end


      if !@mobile_email.nil? && @mobile_email.to_s.length > 250
        invalid_properties.push("invalid value for 'mobile_email', the character length must be smaller than or equal to 250.")
      end


      if !@mobile_extension.nil? && @mobile_extension.to_s.length > 10
        invalid_properties.push("invalid value for 'mobile_extension', the character length must be smaller than or equal to 10.")
      end


      if !@mobile_phone.nil? && @mobile_phone.to_s.length > 15
        invalid_properties.push("invalid value for 'mobile_phone', the character length must be smaller than or equal to 15.")
      end


      if !@office_email.nil? && @office_email.to_s.length > 250
        invalid_properties.push("invalid value for 'office_email', the character length must be smaller than or equal to 250.")
      end


      if !@office_extension.nil? && @office_extension.to_s.length > 10
        invalid_properties.push("invalid value for 'office_extension', the character length must be smaller than or equal to 10.")
      end


      if !@office_phone.nil? && @office_phone.to_s.length > 15
        invalid_properties.push("invalid value for 'office_phone', the character length must be smaller than or equal to 15.")
      end


      if !@title.nil? && @title.to_s.length > 50
        invalid_properties.push("invalid value for 'title', the character length must be smaller than or equal to 50.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @default_department_id.nil?
      return false if !@default_email.nil? && @default_email.to_s.length > 250
      return false if @default_location_id.nil?
      return false if !@default_phone.nil? && @default_phone.to_s.length > 15
      return false if @expense_approver.nil?
      return false if @first_name.nil?
      return false if @first_name.to_s.length > 30
      return false if !@home_email.nil? && @home_email.to_s.length > 250
      return false if !@home_extension.nil? && @home_extension.to_s.length > 10
      return false if !@home_phone.nil? && @home_phone.to_s.length > 15
      return false if @identifier.nil?
      return false if @identifier.to_s.length > 15
      return false if @last_name.nil?
      return false if @last_name.to_s.length > 30
      return false if @license_class.nil?
      license_class_validator = EnumAttributeValidator.new('String', ["F", "A", "C", "X"])
      return false unless license_class_validator.valid?(@license_class)
      return false if !@mobile_email.nil? && @mobile_email.to_s.length > 250
      return false if !@mobile_extension.nil? && @mobile_extension.to_s.length > 10
      return false if !@mobile_phone.nil? && @mobile_phone.to_s.length > 15
      return false if !@office_email.nil? && @office_email.to_s.length > 250
      return false if !@office_extension.nil? && @office_extension.to_s.length > 10
      return false if !@office_phone.nil? && @office_phone.to_s.length > 15
      return false if @sales_default_location_id.nil?
      return false if @time_approver.nil?
      return false if @time_zone.nil?
      return false if !@title.nil? && @title.to_s.length > 50
      return false if @work_role.nil?
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] default_email Value to be assigned
    def default_email=(default_email)

      if !default_email.nil? && default_email.to_s.length > 250
        fail ArgumentError, "invalid value for 'default_email', the character length must be smaller than or equal to 250."
      end

      @default_email = default_email
    end

    # Custom attribute writer method with validation
    # @param [Object] default_phone Value to be assigned
    def default_phone=(default_phone)

      if !default_phone.nil? && default_phone.to_s.length > 15
        fail ArgumentError, "invalid value for 'default_phone', the character length must be smaller than or equal to 15."
      end

      @default_phone = default_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if first_name.nil?
        fail ArgumentError, "first_name cannot be nil"
      end

      if first_name.to_s.length > 30
        fail ArgumentError, "invalid value for 'first_name', the character length must be smaller than or equal to 30."
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] home_email Value to be assigned
    def home_email=(home_email)

      if !home_email.nil? && home_email.to_s.length > 250
        fail ArgumentError, "invalid value for 'home_email', the character length must be smaller than or equal to 250."
      end

      @home_email = home_email
    end

    # Custom attribute writer method with validation
    # @param [Object] home_extension Value to be assigned
    def home_extension=(home_extension)

      if !home_extension.nil? && home_extension.to_s.length > 10
        fail ArgumentError, "invalid value for 'home_extension', the character length must be smaller than or equal to 10."
      end

      @home_extension = home_extension
    end

    # Custom attribute writer method with validation
    # @param [Object] home_phone Value to be assigned
    def home_phone=(home_phone)

      if !home_phone.nil? && home_phone.to_s.length > 15
        fail ArgumentError, "invalid value for 'home_phone', the character length must be smaller than or equal to 15."
      end

      @home_phone = home_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] identifier Value to be assigned
    def identifier=(identifier)
      if identifier.nil?
        fail ArgumentError, "identifier cannot be nil"
      end

      if identifier.to_s.length > 15
        fail ArgumentError, "invalid value for 'identifier', the character length must be smaller than or equal to 15."
      end

      @identifier = identifier
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if last_name.nil?
        fail ArgumentError, "last_name cannot be nil"
      end

      if last_name.to_s.length > 30
        fail ArgumentError, "invalid value for 'last_name', the character length must be smaller than or equal to 30."
      end

      @last_name = last_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] license_class Object to be assigned
    def license_class=(license_class)
      validator = EnumAttributeValidator.new('String', ["F", "A", "C", "X"])
      unless validator.valid?(license_class)
        fail ArgumentError, "invalid value for 'license_class', must be one of #{validator.allowable_values}."
      end
      @license_class = license_class
    end

    # Custom attribute writer method with validation
    # @param [Object] mobile_email Value to be assigned
    def mobile_email=(mobile_email)

      if !mobile_email.nil? && mobile_email.to_s.length > 250
        fail ArgumentError, "invalid value for 'mobile_email', the character length must be smaller than or equal to 250."
      end

      @mobile_email = mobile_email
    end

    # Custom attribute writer method with validation
    # @param [Object] mobile_extension Value to be assigned
    def mobile_extension=(mobile_extension)

      if !mobile_extension.nil? && mobile_extension.to_s.length > 10
        fail ArgumentError, "invalid value for 'mobile_extension', the character length must be smaller than or equal to 10."
      end

      @mobile_extension = mobile_extension
    end

    # Custom attribute writer method with validation
    # @param [Object] mobile_phone Value to be assigned
    def mobile_phone=(mobile_phone)

      if !mobile_phone.nil? && mobile_phone.to_s.length > 15
        fail ArgumentError, "invalid value for 'mobile_phone', the character length must be smaller than or equal to 15."
      end

      @mobile_phone = mobile_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] office_email Value to be assigned
    def office_email=(office_email)

      if !office_email.nil? && office_email.to_s.length > 250
        fail ArgumentError, "invalid value for 'office_email', the character length must be smaller than or equal to 250."
      end

      @office_email = office_email
    end

    # Custom attribute writer method with validation
    # @param [Object] office_extension Value to be assigned
    def office_extension=(office_extension)

      if !office_extension.nil? && office_extension.to_s.length > 10
        fail ArgumentError, "invalid value for 'office_extension', the character length must be smaller than or equal to 10."
      end

      @office_extension = office_extension
    end

    # Custom attribute writer method with validation
    # @param [Object] office_phone Value to be assigned
    def office_phone=(office_phone)

      if !office_phone.nil? && office_phone.to_s.length > 15
        fail ArgumentError, "invalid value for 'office_phone', the character length must be smaller than or equal to 15."
      end

      @office_phone = office_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] title Value to be assigned
    def title=(title)

      if !title.nil? && title.to_s.length > 50
        fail ArgumentError, "invalid value for 'title', the character length must be smaller than or equal to 50."
      end

      @title = title
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          admin_flag == o.admin_flag &&
          allow_expenses_entered_against_companies_flag == o.allow_expenses_entered_against_companies_flag &&
          allow_in_cell_entry_on_time_sheet == o.allow_in_cell_entry_on_time_sheet &&
          billable_forecast == o.billable_forecast &&
          calendar == o.calendar &&
          calendar_sync_integration_flag == o.calendar_sync_integration_flag &&
          country == o.country &&
          daily_capacity == o.daily_capacity &&
          days_tolerance == o.days_tolerance &&
          default_department_id == o.default_department_id &&
          default_email == o.default_email &&
          default_location_id == o.default_location_id &&
          default_phone == o.default_phone &&
          disable_online_flag == o.disable_online_flag &&
          enable_ldap_authentication_flag == o.enable_ldap_authentication_flag &&
          enable_mobile_flag == o.enable_mobile_flag &&
          enable_mobile_gps_flag == o.enable_mobile_gps_flag &&
          enter_time_against_company_flag == o.enter_time_against_company_flag &&
          expense_approver == o.expense_approver &&
          first_name == o.first_name &&
          hide_member_in_dispatch_portal_flag == o.hide_member_in_dispatch_portal_flag &&
          hire_date == o.hire_date &&
          home_email == o.home_email &&
          home_extension == o.home_extension &&
          home_phone == o.home_phone &&
          hourly_cost == o.hourly_cost &&
          hourly_rate == o.hourly_rate &&
          id == o.id &&
          identifier == o.identifier &&
          inactive_date == o.inactive_date &&
          inactive_flag == o.inactive_flag &&
          include_in_utilization_reporting_flag == o.include_in_utilization_reporting_flag &&
          last_login == o.last_login &&
          last_name == o.last_name &&
          license_class == o.license_class &&
          mapi_name == o.mapi_name &&
          middle_initial == o.middle_initial &&
          minimum_hours == o.minimum_hours &&
          mobile_email == o.mobile_email &&
          mobile_extension == o.mobile_extension &&
          mobile_phone == o.mobile_phone &&
          notes == o.notes &&
          office_email == o.office_email &&
          office_extension == o.office_extension &&
          office_phone == o.office_phone &&
          project_default_board == o.project_default_board &&
          project_default_department_id == o.project_default_department_id &&
          project_default_location_id == o.project_default_location_id &&
          reports_to == o.reports_to &&
          require_expense_entry_flag == o.require_expense_entry_flag &&
          require_start_and_end_time_on_time_entry_flag == o.require_start_and_end_time_on_time_entry_flag &&
          require_time_sheet_entry_flag == o.require_time_sheet_entry_flag &&
          restrict_default_sales_territory_flag == o.restrict_default_sales_territory_flag &&
          restrict_default_warehouse_bin_flag == o.restrict_default_warehouse_bin_flag &&
          restrict_default_warehouse_flag == o.restrict_default_warehouse_flag &&
          restrict_department_flag == o.restrict_department_flag &&
          restrict_location_flag == o.restrict_location_flag &&
          restrict_project_default_department_flag == o.restrict_project_default_department_flag &&
          restrict_project_default_location_flag == o.restrict_project_default_location_flag &&
          restrict_schedule_flag == o.restrict_schedule_flag &&
          restrict_service_default_department_flag == o.restrict_service_default_department_flag &&
          restrict_service_default_location_flag == o.restrict_service_default_location_flag &&
          sales_default_location_id == o.sales_default_location_id &&
          schedule_capacity == o.schedule_capacity &&
          schedule_default_department_id == o.schedule_default_department_id &&
          schedule_default_location_id == o.schedule_default_location_id &&
          security_level == o.security_level &&
          security_location_id == o.security_location_id &&
          security_role == o.security_role &&
          service_default_board == o.service_default_board &&
          service_default_department_id == o.service_default_department_id &&
          service_default_location_id == o.service_default_location_id &&
          service_location == o.service_location &&
          service_teams == o.service_teams &&
          time_approver == o.time_approver &&
          time_reminder_email_flag == o.time_reminder_email_flag &&
          time_sheet_start_date == o.time_sheet_start_date &&
          time_zone == o.time_zone &&
          title == o.title &&
          type == o.type &&
          vendor_number == o.vendor_number &&
          warehouse == o.warehouse &&
          warehouse_bin == o.warehouse_bin &&
          work_role == o.work_role &&
          work_type == o.work_type &&
          _info == o._info &&
          system_flag == o.system_flag
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [admin_flag, allow_expenses_entered_against_companies_flag, allow_in_cell_entry_on_time_sheet, billable_forecast, calendar, calendar_sync_integration_flag, country, daily_capacity, days_tolerance, default_department_id, default_email, default_location_id, default_phone, disable_online_flag, enable_ldap_authentication_flag, enable_mobile_flag, enable_mobile_gps_flag, enter_time_against_company_flag, expense_approver, first_name, hide_member_in_dispatch_portal_flag, hire_date, home_email, home_extension, home_phone, hourly_cost, hourly_rate, id, identifier, inactive_date, inactive_flag, include_in_utilization_reporting_flag, last_login, last_name, license_class, mapi_name, middle_initial, minimum_hours, mobile_email, mobile_extension, mobile_phone, notes, office_email, office_extension, office_phone, project_default_board, project_default_department_id, project_default_location_id, reports_to, require_expense_entry_flag, require_start_and_end_time_on_time_entry_flag, require_time_sheet_entry_flag, restrict_default_sales_territory_flag, restrict_default_warehouse_bin_flag, restrict_default_warehouse_flag, restrict_department_flag, restrict_location_flag, restrict_project_default_department_flag, restrict_project_default_location_flag, restrict_schedule_flag, restrict_service_default_department_flag, restrict_service_default_location_flag, sales_default_location_id, schedule_capacity, schedule_default_department_id, schedule_default_location_id, security_level, security_location_id, security_role, service_default_board, service_default_department_id, service_default_location_id, service_location, service_teams, time_approver, time_reminder_email_flag, time_sheet_start_date, time_zone, title, type, vendor_number, warehouse, warehouse_bin, work_role, work_type, _info, system_flag].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Connectwise.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
