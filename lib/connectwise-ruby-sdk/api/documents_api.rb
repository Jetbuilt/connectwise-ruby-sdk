=begin
#Connectwise REST API

#ConnectWise API

OpenAPI spec version: 1.0.0
Contact: platform@connectwise.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module Connectwise
  class DocumentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Get Documents Info Count
    # @param [Hash] opts the optional parameters
    # @option opts [String] :record_type 
    # @option opts [Integer] :record_id 
    # @return [Count]
    def system_documents_count_get(opts = {})
      data, _status_code, _headers = system_documents_count_get_with_http_info(opts)
      return data
    end

    # 
    # Get Documents Info Count
    # @param [Hash] opts the optional parameters
    # @option opts [String] :record_type 
    # @option opts [Integer] :record_id 
    # @return [Array<(Count, Fixnum, Hash)>] Count data, response status code and response headers
    def system_documents_count_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DocumentsApi.system_documents_count_get ..."
      end
      if opts[:'record_type'] && !['Agreement', 'Company', 'Configuration', 'Contact', 'Expense', 'Opportunity', 'Project', 'PurchaseOrder', 'Rma', 'SalesOrder', 'Ticket', 'ServiceTemplate', 'KnowledgeBase'].include?(opts[:'record_type'])
        fail ArgumentError, 'invalid value for "record_type", must be one of Agreement, Company, Configuration, Contact, Expense, Opportunity, Project, PurchaseOrder, Rma, SalesOrder, Ticket, ServiceTemplate, KnowledgeBase'
      end
      # resource path
      local_var_path = "/system/documents/count".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'recordType'] = opts[:'record_type'] if !opts[:'record_type'].nil?
      query_params[:'recordId'] = opts[:'record_id'] if !opts[:'record_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Count')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#system_documents_count_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get Documents Info
    # @param [Hash] opts the optional parameters
    # @option opts [String] :record_type 
    # @option opts [Integer] :record_id 
    # @option opts [Integer] :page 
    # @option opts [Integer] :page_size 
    # @return [Array<DocumentInfo>]
    def system_documents_get(opts = {})
      data, _status_code, _headers = system_documents_get_with_http_info(opts)
      return data
    end

    # 
    # Get Documents Info
    # @param [Hash] opts the optional parameters
    # @option opts [String] :record_type 
    # @option opts [Integer] :record_id 
    # @option opts [Integer] :page 
    # @option opts [Integer] :page_size 
    # @return [Array<(Array<DocumentInfo>, Fixnum, Hash)>] Array<DocumentInfo> data, response status code and response headers
    def system_documents_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DocumentsApi.system_documents_get ..."
      end
      if opts[:'record_type'] && !['Agreement', 'Company', 'Configuration', 'Contact', 'Expense', 'Opportunity', 'Project', 'PurchaseOrder', 'Rma', 'SalesOrder', 'Ticket', 'ServiceTemplate', 'KnowledgeBase'].include?(opts[:'record_type'])
        fail ArgumentError, 'invalid value for "record_type", must be one of Agreement, Company, Configuration, Contact, Expense, Opportunity, Project, PurchaseOrder, Rma, SalesOrder, Ticket, ServiceTemplate, KnowledgeBase'
      end
      # resource path
      local_var_path = "/system/documents".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'recordType'] = opts[:'record_type'] if !opts[:'record_type'].nil?
      query_params[:'recordId'] = opts[:'record_id'] if !opts[:'record_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DocumentInfo>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#system_documents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete Document Info By Id
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def system_documents_id_delete(id, opts = {})
      system_documents_id_delete_with_http_info(id, opts)
      return nil
    end

    # 
    # Delete Document Info By Id
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def system_documents_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DocumentsApi.system_documents_id_delete ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DocumentsApi.system_documents_id_delete" if id.nil?
      # resource path
      local_var_path = "/system/documents/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#system_documents_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Download Document
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :last_modified 
    # @return [nil]
    def system_documents_id_download_get(id, opts = {})
      system_documents_id_download_get_with_http_info(id, opts)
      return nil
    end

    # 
    # Download Document
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :last_modified 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def system_documents_id_download_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DocumentsApi.system_documents_id_download_get ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DocumentsApi.system_documents_id_download_get" if id.nil?
      # resource path
      local_var_path = "/system/documents/{id}/download".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'lastModified'] = opts[:'last_modified'] if !opts[:'last_modified'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/octet-stream']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#system_documents_id_download_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get Document Info By Id
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [DocumentInfo]
    def system_documents_id_get(id, opts = {})
      data, _status_code, _headers = system_documents_id_get_with_http_info(id, opts)
      return data
    end

    # 
    # Get Document Info By Id
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentInfo, Fixnum, Hash)>] DocumentInfo data, response status code and response headers
    def system_documents_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DocumentsApi.system_documents_id_get ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DocumentsApi.system_documents_id_get" if id.nil?
      # resource path
      local_var_path = "/system/documents/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#system_documents_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update Document By Id
    # @param id 
    # @param record_id Entity id
    # @param record_type Entity type
    # @param title Document title
    # @param url Document url
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file File to upload
    # @option opts [BOOLEAN] :private_flag Indicates if document is private
    # @option opts [BOOLEAN] :read_only_flag Indicates if document is readonly
    # @return [DocumentInfo]
    def system_documents_id_post(id, record_id, record_type, title, url, opts = {})
      data, _status_code, _headers = system_documents_id_post_with_http_info(id, record_id, record_type, title, url, opts)
      return data
    end

    # 
    # Update Document By Id
    # @param id 
    # @param record_id Entity id
    # @param record_type Entity type
    # @param title Document title
    # @param url Document url
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file File to upload
    # @option opts [BOOLEAN] :private_flag Indicates if document is private
    # @option opts [BOOLEAN] :read_only_flag Indicates if document is readonly
    # @return [Array<(DocumentInfo, Fixnum, Hash)>] DocumentInfo data, response status code and response headers
    def system_documents_id_post_with_http_info(id, record_id, record_type, title, url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DocumentsApi.system_documents_id_post ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DocumentsApi.system_documents_id_post" if id.nil?
      # verify the required parameter 'record_id' is set
      fail ArgumentError, "Missing the required parameter 'record_id' when calling DocumentsApi.system_documents_id_post" if record_id.nil?
      # verify the required parameter 'record_type' is set
      fail ArgumentError, "Missing the required parameter 'record_type' when calling DocumentsApi.system_documents_id_post" if record_type.nil?
      # verify enum value
      unless ['Ticket', 'Company', 'Configuration', 'Contact', 'Expense', 'Opportunity', 'PurchaseOrder', 'Project', 'SalesOrder', 'ServiceTemplate', 'Rma', 'Agreement'].include?(record_type)
        fail ArgumentError, "invalid value for 'record_type', must be one of Ticket, Company, Configuration, Contact, Expense, Opportunity, PurchaseOrder, Project, SalesOrder, ServiceTemplate, Rma, Agreement"
      end
      # verify the required parameter 'title' is set
      fail ArgumentError, "Missing the required parameter 'title' when calling DocumentsApi.system_documents_id_post" if title.nil?
      if title.to_s.length > 100
        fail ArgumentError, 'invalid value for "title" when calling DocumentsApi.system_documents_id_post, the character length must be smaller than or equal to 100.'
      end

      # verify the required parameter 'url' is set
      fail ArgumentError, "Missing the required parameter 'url' when calling DocumentsApi.system_documents_id_post" if url.nil?
      if url.to_s.length > 500
        fail ArgumentError, 'invalid value for "url" when calling DocumentsApi.system_documents_id_post, the character length must be smaller than or equal to 500.'
      end

      # resource path
      local_var_path = "/system/documents/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['multipart/form-data']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["recordId"] = record_id
      form_params["recordType"] = record_type
      form_params["title"] = title
      form_params["url"] = url
      form_params["file"] = opts[:'file'] if !opts[:'file'].nil?
      form_params["privateFlag"] = opts[:'private_flag'] if !opts[:'private_flag'].nil?
      form_params["readOnlyFlag"] = opts[:'read_only_flag'] if !opts[:'read_only_flag'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#system_documents_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Insert Document
    # @param record_id Entity id
    # @param record_type Entity type
    # @param title Document title
    # @param url Document url
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file File to upload
    # @option opts [BOOLEAN] :private_flag Indicates if document is private
    # @option opts [BOOLEAN] :read_only_flag Indicates if document is readonly
    # @return [DocumentInfo]
    def system_documents_post(record_id, record_type, title, url, opts = {})
      data, _status_code, _headers = system_documents_post_with_http_info(record_id, record_type, title, url, opts)
      return data
    end

    # 
    # Insert Document
    # @param record_id Entity id
    # @param record_type Entity type
    # @param title Document title
    # @param url Document url
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file File to upload
    # @option opts [BOOLEAN] :private_flag Indicates if document is private
    # @option opts [BOOLEAN] :read_only_flag Indicates if document is readonly
    # @return [Array<(DocumentInfo, Fixnum, Hash)>] DocumentInfo data, response status code and response headers
    def system_documents_post_with_http_info(record_id, record_type, title, url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DocumentsApi.system_documents_post ..."
      end
      # verify the required parameter 'record_id' is set
      fail ArgumentError, "Missing the required parameter 'record_id' when calling DocumentsApi.system_documents_post" if record_id.nil?
      # verify the required parameter 'record_type' is set
      fail ArgumentError, "Missing the required parameter 'record_type' when calling DocumentsApi.system_documents_post" if record_type.nil?
      # verify enum value
      unless ['Ticket', 'Company', 'Configuration', 'Contact', 'Expense', 'Opportunity', 'PurchaseOrder', 'Project', 'SalesOrder', 'ServiceTemplate', 'Rma', 'Agreement'].include?(record_type)
        fail ArgumentError, "invalid value for 'record_type', must be one of Ticket, Company, Configuration, Contact, Expense, Opportunity, PurchaseOrder, Project, SalesOrder, ServiceTemplate, Rma, Agreement"
      end
      # verify the required parameter 'title' is set
      fail ArgumentError, "Missing the required parameter 'title' when calling DocumentsApi.system_documents_post" if title.nil?
      if title.to_s.length > 100
        fail ArgumentError, 'invalid value for "title" when calling DocumentsApi.system_documents_post, the character length must be smaller than or equal to 100.'
      end

      # verify the required parameter 'url' is set
      fail ArgumentError, "Missing the required parameter 'url' when calling DocumentsApi.system_documents_post" if url.nil?
      if url.to_s.length > 500
        fail ArgumentError, 'invalid value for "url" when calling DocumentsApi.system_documents_post, the character length must be smaller than or equal to 500.'
      end

      # resource path
      local_var_path = "/system/documents".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['multipart/form-data']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["recordId"] = record_id
      form_params["recordType"] = record_type
      form_params["title"] = title
      form_params["url"] = url
      form_params["file"] = opts[:'file'] if !opts[:'file'].nil?
      form_params["privateFlag"] = opts[:'private_flag'] if !opts[:'private_flag'].nil?
      form_params["readOnlyFlag"] = opts[:'read_only_flag'] if !opts[:'read_only_flag'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#system_documents_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get Upload Sample Page
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def system_documents_uploadsample_get(opts = {})
      system_documents_uploadsample_get_with_http_info(opts)
      return nil
    end

    # 
    # Get Upload Sample Page
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def system_documents_uploadsample_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DocumentsApi.system_documents_uploadsample_get ..."
      end
      # resource path
      local_var_path = "/system/documents/uploadsample".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/html']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#system_documents_uploadsample_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
